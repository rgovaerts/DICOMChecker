package DICOMChecker;

import com.pixelmed.dicom.*;
import com.pixelmed.display.SourceImage;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.BadLocationException;
//import javax.swing.text.Document;
import javax.swing.text.StyledDocument;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author INFO-H-400
 */
public class NewJFrame extends javax.swing.JFrame {

    private AttributeList dicomList;
    private ArrayList fields;
    private AnalyzeDicom verifDB;
    private XMLreader xmlr;
    
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Load DICOM File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tag", "Attribute Name", "Type"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("No DICOM loaded");

        jButton2.setText("Scan XML to DB");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Liste des champs obligatoires pour la modailté : -No DICOM loaded-");

        jButton3.setText("Check DICOM");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 585, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addGap(340, 340, 340))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(472, 472, 472))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton2)
                                    .addComponent(jButton1)
                                    .addComponent(jButton3)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Load DICOM file
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            OpenFile(chooser.getSelectedFile());
            try {
                //System.out.println(getModality());
                //System.out.println(Attribute.getSingleStringValueOrEmptyString(dicomList, dicomList.firstKey()));
                dicomToArray();
            } catch (DicomException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            jTextPane1.setText(dicomList.toString());
            jLabel1.setText("Dicom Loaded");
            jLabel2.setText("Liste des champs obligatoires pour la modailté : "+ getModality());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Load XML to DB
    this.xmlr = new XMLreader();
    // La ligne suivante est commentée car la DB était temporaire
    //this.verifDB.addToDataBaseTest(xmlr.getListOfTagsAndType());
    verifDB = new AnalyzeDicom();
    //chercher la modailté dans la db
    //verifDB.getDB(getModality());
    this.verifDB.setDBFields(xmlr.getListOfTagsAndType()); // on donne Au AnalyzeDicom la liste des champs, car il n'a pas pu aller les chercher dans la DB

    this.setTableau();
    this.jTextPane2.setText(xmlr.getListOfTagsAndType().toString());
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
    //Check DICOM
    if(fields != null)
        setLabel(this.verifDB.compareList(fields));
}//GEN-LAST:event_jButton3MouseClicked
  

    public void dicomToArray() throws DicomException
    {
        AttributeTag tempTag;
        Attribute tempAtt;
        //String VL;
        String VM;
        String VR;
        String Tag;
        
        //add ID to dicomlist for testing purpose
        dicomList.putNewAttribute(new AttributeTag("(0x0010,0x0022)"));
        
        fields = new ArrayList();
        tempTag = dicomList.firstKey();
                
                
        while(tempTag != null)
        {
            tempAtt = dicomList.get(tempTag);

            ArrayList tableau = new ArrayList();
            
            //VL = Long.toString(tempAtt.getVL());
            Tag = tempTag.toString();
            Tag = "(" + Tag.charAt(3) + Tag.charAt(4) + Tag.charAt(5) + Tag.charAt(6) + "," + Tag.charAt(10) + Tag.charAt(11) + Tag.charAt(12) + Tag.charAt(13) + ")";
            Tag.toUpperCase();
            tableau.add(0,Tag);
            VR = tempAtt.getVRAsString();
            tableau.add(1,VR);
            VM = Integer.toString(tempAtt.getVM());
            tableau.add(2,VM);
            
            fields.add(tableau);

            tempTag = dicomList.higherKey(tempTag);
        }
        System.out.println(fields.toString());
    }
    
    public String getModality()
    {
        return dicomList.get(TagFromName.Modality).getSingleStringValueOrEmptyString();
    }
    
    public void OpenFile(File file)
    {
        try {
            DicomInputStream dicomStream;
            dicomStream = new DicomInputStream(file);
            dicomList = new AttributeList();
            dicomList.read(dicomStream);
            
        } catch (DicomException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setTableau(){//ArrayList<ArrayList<String>> tableau) {
        
        ArrayList tableau = this.xmlr.getListOfTagsAndType();
        for(int i=0; i<tableau.size();i++){
            if(tableau.get(i) != null){
                ArrayList tempTable = (ArrayList) tableau.get(i); //casting nécéssaire a cause arraylist d'arraylist
                if(tempTable.size() > 0){ //pour filtrer les tableaux vides
                    
                    //affichage d'un tableau directement du xml
                    //mettre le resultat de la requete SQL ici
                    //bug de taille de table pour l'instant d'ou les breaks
                    
                    /*
                    for(int j=0; j<tempTable.size();j++){
                        ArrayList tempTableLine = (ArrayList) tempTable.get(j);
                        String tag = (String) tempTableLine.get(0);
                        jTable1.setValueAt(tag, j, 0);
                        String keyword = (String) tempTableLine.get(1);
                        jTable1.setValueAt(keyword, j, 1);
                        String VR = (String) tempTableLine.get(2);
                        jTable1.setValueAt(VR, j, 2);
                        
                        if(j>2) break;
                    }
                 * 
                 */

                }
                
            }
                
                
                        
        }
    }
    
    public void setLabel(boolean result){
        if (result == true){
            jLabel1.setText("Format du fichier Dicom correct");
        }
        else{
            jLabel1.setText("Format du fichier Dicom incorrect : " + this.verifDB.getMissingInfo().toString() + "non trouvé");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
}
